@using StockMarketSolution.Models.ViewModels;
@model StockTrade;

@{
    ViewBag.Title = "Trade";
    ViewBag.CurrentUrl = "~/Trade/Index";
}

<div class="text-grey ml">
    <span>Stocks</span>
    <i class="fa-solid fa-caret-right"></i>
    <span>@Model.StockName</span>
</div>

<form method="post">
    <div class="box trading-panel">

        <div class="flex trading-panel-flex">
            <div id="stock-price-panel">

                <div class="stock">
                    <h1 class="stock-title">@Model.StockName (@Model.StockSymbol)</h1>
                    <h2 class="stock-price"><small class="text-grey">$</small> <span class="price">@Model.Price.ToString("N")</span></h2>
                </div>

                <div class="date"></div>
            </div>

            <div id="new-order-panel">

                <div class="flex flex-direction-vertical">
                    <h3 class="text-grey mb">New Order</h3>

                    <label for="Quantity" class="mt">Quantity:</label>
                    <div class="w-25">
                        <input type="number" name="Quantity" id="Quantity" value="@Model.Quantity" min="1" max="100000" placeholder="Quantity" required="required" class="form-input mb" autofocus="autofocus" />
                    </div>
                </div>

                <div class="button-panel">

                    <button type="submit" formaction="~/Trade/SellOrder" class="button button-red-back trading-button sell-button">
                        <i class="fa-solid fa-arrow-down"></i>
                        <span>Sell</span>
                    </button>

                    <button type="submit" formaction="~/Trade/BuyOrder" class="button button-green-back trading-button buy-button">
                        <i class="fa-solid fa-arrow-up"></i>
                        <span>Buy</span>
                    </button>

                    @if (ViewBag.Errors != null)
                    {
                        <div class="text-red mt">
                            <ul>
                                @foreach (string error in ViewBag.Errors)
                                {
                                    <li class="ml">@error</li>
                                }
                            </ul>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>

    <input type="hidden" name="StockSymbol" id="StockSymbol" value="@Model.StockSymbol" />
    <input type="hidden" name="StockName" id="StockName" value="@Model.StockName" />
    <input type="hidden" name="Price" id="price" value="@Model.Price" />
    <input type="hidden" id="FinnhubToken" value="@ViewBag.FinnhubToken" />

</form>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const token = '@ViewBag.FinnhubToken';
        const symbol = '@Model.StockSymbol';
        const socket = new WebSocket(`wss://ws.finnhub.io?token=${token}`);

        socket.addEventListener('open', function(event) {
            console.log('WebSocket connection opened');
            socket.send(JSON.stringify({'type':'subscribe', 'symbol': symbol}));
        });

        socket.addEventListener('message', function(event) {
            const message = JSON.parse(event.data);
            console.log('message: ' + message);
            if (message.type === 'trade') {
                const trades = message.data;
                const latestTrade = trades[trades.length - 1];
                if (latestTrade.s === symbol) {
                    document.getElementById('price').innerText = latestTrade.p.toFixed(2);
                }
            }
        });

        socket.addEventListener('close', function(event) {
            console.log('WebSocket connection closed');
        });

        window.addEventListener('beforeunload', function() {
            socket.send(JSON.stringify({'type':'unsubscribe', 'symbol': symbol}));
            socket.close();
        });
    });
</script>
